class Solution {
public:
    int romanToInt(string s) {
        int ans = 0;
  unordered_map<char, int> mpp =
	{ {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M',
																		 1000}
  };
  int n = s.length ();
  char p = '0';
  for (int i = n - 1; i >= 0; i--)
	{
	  if ((p == 'V' || p == 'X') && s[i] == 'I')
		{
		  ans = ans - 1;
		}
	  else if ((p == 'L' || p == 'C') && s[i] == 'X')
		{
		  ans = ans - 10;
		}
	  else if ((p == 'D' || p == 'M') && s[i] == 'C')
		{
		  ans = ans - 100;
		}
	  else
		{

		  ans += mpp[s[i]];
		  p = s[i];
		}
	}
  return ans;
    }
};


/************another approach***************/
int romanToInt(string s) {
    unordered_map<char, int> m;
        
        m['I'] = 1;
        m['V'] = 5;
        m['X'] = 10;
        m['L'] = 50;
        m['C'] = 100;
        m['D'] = 500;
        m['M'] = 1000;
        
        int ans = 0;
        
        for(int i = 0; i < s.length(); i++){
            if(m[s[i]] < m[s[i+1]]){
                ans -= m[s[i]];
            }
            else{
                ans += m[s[i]];
            }
        }
        return ans;
}
